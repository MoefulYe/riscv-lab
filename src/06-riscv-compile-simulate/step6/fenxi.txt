move.o:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <bankmove>:
   0:	000502b3          	add	t0,a0,zero
   4:	00058333          	add	t1,a1,zero
   8:	000603b3          	add	t2,a2,zero

0000000c <L1>:
   c:	0002ae03          	lw	t3,0(t0)
  10:	01c32023          	sw	t3,0(t1)
  14:	00428293          	add	t0,t0,4
  18:	00430313          	add	t1,t1,4
  1c:	fff38393          	add	t2,t2,-1
  20:	fe0396e3          	bnez t2,c <L1>
  24:	00008067          	ret

00000028 <main>:
  28:	03000513          	li	a0,48
  2c:	06000593          	li	a1,96
  30:	00a00613          	li	a2,10
  34:	fcdff0ef          	jal	0 <bankmove>
jr是伪命令jr ra 会被展开为 jalr x0,0(ra)
jal <Label> 等价于 jal 0 offset

0x24地址处的指令的转移地址取决于ra寄存器的值，ra寄存器的值为0x38,所以转移到0x38
0x34地址处的指令的转移地址是0,也就是bankmove函数的开头

a0寄存器设为0x30, a1寄存器设为0x60, a2寄存器设为10然后执行jal bankmove调用bankmove子程序
bankmove子程序先把a0-a2的值写到t0-t2寄存器 t3寄存器写入t0寄存器对应的内存单元的值, 再写入
t1寄存器对应的内存单元。然后t0, t1寄存器指向后一个内存单元，t2寄存器作为计数器减1，如果t2寄存器
不等于零则跳转到L1, 直到0x30-0x58的内存单元的值都被复制到0x60-0x88的内存单元中。之后复制完成返回父程序
main函数执行完成

24:	00008067          	ret
34:	fcdff0ef          	jal	0 <bankmove>
20:	fe0396e3          	bnez t2,c <L1>